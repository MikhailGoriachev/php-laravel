<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Главная</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <a href="http://php.net/" target="_blank"><b>Официальный сайт PHP</b></a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    <a href="http://www.php.su" target="_blank"><b>Портал о PHP, MySQL и других веб-технологиях</b></a>
    <a href="index.php"><b>На главную</b></a>
    <h4>Специальный тип и значение null/NULL</h4>
    <?php
    // $a = NzzULL;
    $a = null;  // такая инициализация не вызывает ошибок на версии 5.x
    echo '$a = ' . $a . '<br/>';
    echo '<hr/>';

    // isset(переменная) проверка наличия у переменной значения
    if (isset($a)) {
        echo 'Значение $a установлено и равно <span style="color: blue">' . $a . '</span>';
    } else {
        echo '<span style="color: red">Значение $a не установлено</span>';
    } // if
    echo '<br/>';


    $a = rand(-100, 100); // установили значение
    // альтернативный синтаксис if - не нужны {}
    if (isset($a)):
        echo 'Значение $a установлено и равно <span style="color: blue">' . $a . '</span>';
    else:
        echo '<span style="color: red">Значение $a не установлено</span>';
    endif;

    // пример на if - elseif - else
    if ($a == 0)
        @$a = 10;
    elseif ($a > 0)
        ++$a;
    else
        $a -= 2;
    echo "<p>Переменная a равна $a</p>";


    // пример на альтернативный if: - elseif: - else: - endif
    if ($a == 0):
        @$a = 10;
    elseif ($a > 0):
        ++$a;
    else:
        $a -= 2;
    endif;
    echo "<p>Переменная a равна $a</p>";

    $a = 61;
    if ($a == "61")
        echo "<p>Они равны</p>";
    if ($a === "61")
        echo "<p>Они в точности равны</p>";
    else
        echo "<p>Они в точности не равны</p>";

    if ($a !== "61")
        echo "<p>Они в точности не равны</p>";
    else
        echo "<p>Они в точности равны</p>";

    ?>
    <hr/>
    <h4>Константы</h4>
    <?php
    // синтаксис определения констант
    //  define(string $name, string $value, bool $case_sen=false)
    define("NUM_ELEMS", 8);
    const X_PRISE = "Аньюше Ансари";
    echo "Значение константы NUM_ELEMS = " . NUM_ELEMS . "<br/>";
    echo "Значение константы X_PRISE = " . X_PRISE . "<br/>";
    $num = NUM_ELEMS;
    echo 'Переменной $num присвоили значение константы NUM_ELEMS, $num = <span style="color: blue">' . $num . '</span><br/>';
    ?>

    <h4>Предопределенные константы</h4>
    <table>
        <tr>
            <td><b>__FILE__</b></td>
            <td>хранит полный путь и имя текущего файла</td>
        </tr>
        <tr>
            <td><b>__LINE__</b></td>
            <td>хранит текущий номер строки, которую обрабатывает интерпретатор</td>
        </tr>
        <tr>
            <td><b>__DIR__</b></td>
            <td>хранит каталог текущего файла</td>
        </tr>
        <tr>
            <td><b>__FUNCTION__</b></td>
            <td>название обрабатываемой функции</td>
        </tr>
        <tr>
            <td><b>__CLASS__</b></td>
            <td>название текущего класса</td>
        </tr>
        <tr>
            <td><b>__METHOD__</b></td>
            <td>название обрабатываемого метода</td>
        </tr>
        <tr>
            <td><b>__NAMESPACE__</b></td>
            <td>название текущего пространства имен</td>
        </tr>
    </table>

    <?php
    // перекодировать string из CP1251 в UTF-8  string = iconv(inEncoding, outEncoding, string)
    // echo "<br/>Это строка <b>" . __LINE__ . "</b> в файле <b>" . iconv("WINDOWS-1251", "UTF-8", __FILE__)  ."</b><br/>";
    echo "<br/>Это строка <b>" . __LINE__ . "</b> в файле <b>" . __FILE__ . "</b><br/>";
    ?>

    <h4>Проверка существования константы</h4>
    <p>
        Чтобы проверить, определена ли константа, мы можем использовать функцию
        <code><b>bool defined(string $name)</b></code>.</p>
    <p>Функция возвращает значение <b>true</b> если константа&nbsp;
        <code>$name</code> определена.</p>
    <?php
    $result = defined("NUM_ELEMS") ? "да" : "нет";
    echo "Константа <b>NUM_ELEMS</b> определена: <b>$result</b><br/>";
    ?>
    <hr/>

    <h3>Определение типа переменной:</h3>
    <ul>
        <li><b>is_integer($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a хранит целое число</li>
        <li><b>is_string($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a хранит строку</li>
        <li><b>is_double($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a хранит действительное число</li>
        <li><b>is_numeric($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a представляет целое или
            действительное число или
            является строковым представлением числа.
        </li>
        <li><b>is_bool($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a хранит значение <code>TRUE</code>
            или <code>FALSE</code></li>
        <li><b>is_scalar($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a представляет один из простых
            типов: строку, целое число,
            действительное число, логическое значение.
        </li>
        <li><b>is_null($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a хранит значение <code>NULL</code>
        </li>
        <li><b>is_array($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a является массивом<</li>
        <li><b>is_object($a)</b>: возвращает значение <code>TRUE</code>, если переменная $a содержит ссылку на объект</li>
        <li><b>gettype($a)</b>: возвращает тип переменной $a, например, <code>integer</code> (целое число),
            <code>double</code> (действительное число), <code>string</code> (строка), <code>boolean</code> (логическое
            значение),
            <code>NULL</code>, <code>array</code> (массив), <code>object</code> (объект) или <code>unknown type</code>.
        </li>
    </ul>
    <hr/>
    <h3>Установка типа. Функция settype()</h3>
    <p>С помощью функции <code>settype()</code> можно установить для переменной определенный тип. Она принимает два
        параметра:
        <code>settype("Переменная", "Тип")</code>. В качестве первого параметра используется переменная, тип которой надо
        установить, а в качестве второго - строковое описание типа, которое возвращается функцией
        <code>gettype()</code>.</p>
    <p>Если удалось установить тип, то функция возвращает <code>TRUE</code>, если нет - то значение <code>FALSE</code>.</p>
    <?php
    // $a = 10 + "0.7";  // это допустимая операция
    $a = 10.7;
    echo gettype($a) . ', $a = ' . $a . '<br/>';
    settype($a, "integer");
    echo gettype($a) . ', $a = ' . $a . '<br/>';
    ?>
    <h3>Статические переменные</h3>
    <?php
    # возможен вызов до объявления
    getStatic();

    function getStatic() {
        // объявляем ссылку на статическую переменную
        // локальная область видимости, глобальное время жизни
        static $svar = 0;
        echo 'getStatic: $svar = ' . $svar . '<br />';
        $svar++;
    }

    getStatic();
    getStatic();
    ?>

    <h3>Глобальные переменные</h3>
    <?php
    $gvar = 123;
    $var1 = 100;

    function getGlobal() {
        // объявляем ссылку на глобальную переменную - доступ из функции к $gvar
        // кстати, такой же синтаксис будет и в Python
        global $gvar;

        echo 'getGlobal: $gvar = ' . $gvar . '<br />';
        $gvar = 20;
        echo 'getGlobal: $gvar = ' . $gvar . '<br />';
        // локальная $var1 не имеет отношения к $var1 вне функции
        // echo "var1 = $var1<br/>";
    }

    echo '$gvar = ' . $gvar . '<br />';  // до вызова функции
    getGlobal();
    echo '$gvar = ' . $gvar . '<br />'; // после вызова функции
    ?>

    <hr/>
    <hr/>

    <?php
    $a = 0xabba;     // шестнадцатеричная система счисления
    $b = 0177;       // восьмиричная система счисления
    //  при указании недопустимых цифр (8, 9)
    // страница не формируется, ответ сервера - 500,
    // внутренняя ошибка
    $c = 0b110101;   // двоичная система счисления

    // пример heredoc-синтаксиса для вывода длинной строки с возможностью вывода
    // значений переменных
    echo <<<_EOT
        <h3>Вывод значений переменных, заданных в системах счисления, отличных от десятичной</h3>
        <ul>
            <li>Шестнадцатеричная система счисления: 0xabba = $a</li>
            <li>Восьмеричная система счисления: 0177 = $b</li>
            <li>Двоичная система счисления: 0b110101 = $c</li>
        </ul>
    _EOT;

    // пример newdoc-синтаксиса для вывода длинной строки без возможности вывода
    // значений переменных
    $s = <<<'_RET'
        <h3>Пример nowdoc</h3>
        <ul>
            <li>Шестнадцатеричная система счисления: 0xabba = $a</li>
            <li>Восьмеричная система счисления: 0177 = $b</li>
            <li>Двоичная система счисления: 0b110101 = $c</li>
        </ul>
    _RET;
    echo $s;

    // логические операции
    // !  --
    // && -- and
    // || -- or
    //    -- xor - исключающее ИЛИ, нет иероглифа операции
    $a = random_int(-100, 100);

    $b = $a > -50 and $a < 50;
    $c = !$b;

    echo <<< EOU
        <h4>Вывод аргрументов и результата логической операции</h4>
        <ul>
            <li>арг1: $a</li>
            <li>арг2: $b</li>
            <li>результат: $c</li>
        </ul>
    EOU;

    // битовые операции
    // &  И
    // |  ИЛИ
    // ~  НЕ

    // пример функции, возвращающий значение (заодно и рекурсивная)
    function fibo($n) {
        return $n <= 1 ? 1 : fibo($n - 1) + fibo($n - 2);
    } // fibo
    ?>

    <h3>Функция, возвращающая значение (заодно и рекурсивная)</h3>
    <ul>
        <li>Число Фибоначчи(5) = <?= fibo(5) ?></li>
        <li>Число Фибоначчи(12) = <?= fibo(12) ?></li>
        <li>Число Фибоначчи(22) = <?= fibo(22) ?></li>
    </ul>

</body>
</html>
